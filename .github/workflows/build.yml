---
name: build

on:
  push:
    branches: [main]
    paths:
      - "CMakeLists.txt"
      - "cmake/**"
      - "include/**"
      - "src/**"
      - "examples/**"
      - "tools/amalgamate.py"
      - "CMakePresets.json"
      - ".github/workflows/build.yml"
  pull_request:
    paths:
      - "CMakeLists.txt"
      - "cmake/**"
      - "include/**"
      - "src/**"
      - "examples/**"
      - "tools/amalgamate.py"
      - "CMakePresets.json"
      - ".github/workflows/build.yml"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NINJA_VERSION: "1.13.1"
  SCCACHE_VERSION: "0.7.5"
  SCCACHE_DIR: ${{ github.workspace }}/.sccache
  SCCACHE_CACHE_SIZE: "2G"

jobs:
  build-lib:
    name: build-lib (${{ matrix.os }}, ${{ matrix.compiler }}, shared=${{ matrix.shared }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        compiler: [gcc, clang, msvc]
        shared: [false, true]
        exclude:
          - os: ubuntu-latest
            compiler: msvc
          - os: macos-latest
            compiler: msvc
          - os: macos-latest
            compiler: gcc
          - os: windows-latest
            compiler: gcc
          - os: windows-latest
            compiler: clang

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Ninja
        uses: ./.github/actions/setup-ninja
        with:
          version: ${{ env.NINJA_VERSION }}

      - name: Setup Python (if needed)
        id: setup_python
        uses: ./.github/actions/setup-python-if-needed
        with:
          min_version: "3.10"
          setup_version: "3.11"

      - name: Setup CMake (if needed)
        id: setup_cmake
        uses: ./.github/actions/setup-cmake-if-needed
        with:
          python_bin: ${{ steps.setup_python.outputs.python_bin }}

      - name: Restore sccache object cache
        uses: actions/cache@v4
        with:
          path: ${{ env.SCCACHE_DIR }}
          key: ${{ runner.os }}-lib-${{ matrix.compiler }}-shared-${{ matrix.shared }}-${{ hashFiles('CMakeLists.txt', 'CMakePresets.json', 'include/**', 'src/**', 'tools/amalgamate.py') }}
          restore-keys: |
            ${{ runner.os }}-lib-${{ matrix.compiler }}-shared-${{ matrix.shared }}-

      - name: Setup sccache
        uses: ./.github/actions/setup-sccache
        with:
          version: ${{ env.SCCACHE_VERSION }}

      - name: Setup MSVC env Windows
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Configure preset for lib
        shell: bash
        run: |
          if [ "${{ matrix.shared }}" = "true" ]; then
            cmake --preset ci-lib-shared
          else
            cmake --preset ci-lib-static
          fi
        env:
          CC: ${{ (matrix.os == 'ubuntu-latest' && matrix.compiler == 'clang') && 'clang' || (matrix.os == 'ubuntu-latest' && matrix.compiler == 'gcc') && 'gcc' || '' }}
          CXX: ${{ (matrix.os == 'ubuntu-latest' && matrix.compiler == 'clang') && 'clang++' || (matrix.os == 'ubuntu-latest' && matrix.compiler == 'gcc') && 'g++' || '' }}

      - name: Build preset for lib
        shell: bash
        run: |
          if [ "${{ matrix.shared }}" = "true" ]; then
            cmake --build --preset ci-lib-shared --parallel
          else
            cmake --build --preset ci-lib-static --parallel
          fi

      - name: List potential library artifacts (debug aid)
        if: matrix.shared == true
        shell: bash
        run: |
          echo "== Top-level build tree =="
          ls -la
          echo "== Find shared libs in build dir =="
          find . -type f \( -name "*.so" -o -name "*.dylib" -o -name "*.dll" \) -print || true
          echo "== Find static libs in build dir (for context) =="
          find . -type f \( -name "*.a" -o -name "*.lib" \) -print || true

      - name: Locate built shared library
        id: locate_shared
        if: matrix.shared == true
        shell: bash
        run: |
          set -euo pipefail
          cand="$(find . -type f \( -name "libbyteweave.so" -o -name "libbyteweave.dylib" -o -name "byteweave.dll" \) | head -n1 || true)"
          if [ -z "$cand" ]; then
            cand="$(find . -type f \( -name "*byteweave*.so" -o -name "*byteweave*.dylib" -o -name "*byteweave*.dll" \) | head -n1 || true)"
          fi
          if [ -z "$cand" ]; then
            echo "::error ::Shared library not found after shared build."
            exit 1
          fi
          echo "path=$cand" >> "$GITHUB_OUTPUT"
          echo "Found shared library: $cand"

      - name: Check exported symbols (POSIX)
        if: matrix.shared == true && runner.os != 'Windows'
        shell: bash
        run: |
          set -euo pipefail
          lib="${{ steps.locate_shared.outputs.path }}"
          if [[ "$RUNNER_OS" == "macOS" ]]; then
            nm -gU "$lib" | head -n 200 || true
          else
            nm -gD "$lib" | head -n 200 || true
          fi

      - name: Check exported symbols (Windows)
        if: matrix.shared == true && runner.os == 'Windows'
        shell: pwsh
        run: |
          $lib = "${{ steps.locate_shared.outputs.path }}".Replace('/','\')
          & "dumpbin.exe" /EXPORTS "$lib" | Select-Object -First 200 | Out-String

      - name: Run example_lib Linux and macOS
        if: runner.os != 'Windows'
        shell: bash
        run: |
          set -euo pipefail
          basedir=$([ "${{ matrix.shared }}" = "true" ] && echo "build/ci-lib-shared" || echo "build/ci-lib-static")
          if [ "${{ matrix.shared }}" = "true" ]; then
            export LD_LIBRARY_PATH="$basedir:${LD_LIBRARY_PATH:-}"
            export DYLD_LIBRARY_PATH="$basedir:${DYLD_LIBRARY_PATH:-}"
            export PATH="$basedir:${PATH}"
          fi
          exe="$basedir/example_lib"
          if [ ! -f "$exe" ]; then
            echo "example_lib not found at $exe" >&2
            exit 1
          fi
          "$exe"

      - name: Run example_lib Windows
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $dir = if ("${{ matrix.shared }}" -eq "true") { "build/ci-lib-shared" } else { "build/ci-lib-static" }
          $exe = "$dir/example_lib.exe"
          $alt = "$dir/Release/example_lib.exe"
          if (!(Test-Path $exe) -and (Test-Path $alt)) { $exe = $alt }
          if (!(Test-Path $exe)) {
            Write-Error "example_lib not found at $exe"
          }
          $env:PATH = "$dir;$env:PATH"
          & $exe

      - name: sccache stats (final)
        if: always()
        uses: ./.github/actions/sccache-stats

  build-header:
    name: build-header (${{ matrix.os }}, ${{ matrix.compiler }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        compiler: [gcc, clang, msvc]
        exclude:
          - os: ubuntu-latest
            compiler: msvc
          - os: macos-latest
            compiler: msvc
          - os: macos-latest
            compiler: gcc
          - os: windows-latest
            compiler: gcc
          - os: windows-latest
            compiler: clang

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Ninja
        uses: ./.github/actions/setup-ninja
        with:
          version: ${{ env.NINJA_VERSION }}

      - name: Setup Python (if needed)
        id: setup_python
        uses: ./.github/actions/setup-python-if-needed
        with:
          min_version: "3.10"
          setup_version: "3.11"

      - name: Setup CMake (if needed)
        id: setup_cmake
        uses: ./.github/actions/setup-cmake-if-needed
        with:
          min_version: "3.20.0"
          cmake_version: "3.29.*"
          python_bin: ${{ steps.setup_python.outputs.python_bin }}

      - name: Restore sccache object cache
        uses: actions/cache@v4
        with:
          path: ${{ env.SCCACHE_DIR }}
          key: ${{ runner.os }}-header-${{ matrix.compiler }}-${{ hashFiles('CMakeLists.txt', 'CMakePresets.json', 'include/**', 'src/**', 'tools/amalgamate.py') }}
          restore-keys: |
            ${{ runner.os }}-header-${{ matrix.compiler }}-

      - name: Setup sccache
        uses: ./.github/actions/setup-sccache
        with:
          version: ${{ env.SCCACHE_VERSION }}

      - name: Setup MSVC env Windows
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Configure preset ci-header
        shell: bash
        run: cmake --preset ci-header

      - name: Compile-only umbrella header POSIX
        if: runner.os != 'Windows'
        shell: bash
        run: |
          set -euo pipefail
          CXX=$(grep -E '^CMAKE_CXX_COMPILER:FILEPATH=' build/ci-header/CMakeCache.txt | cut -d= -f2-)
          cat > header_only.cpp <<'CPP'
          #include "byteweave/byteweave.hpp"
          int main() { return 0; }
          CPP
          "$CXX" -std=c++20 -DBYTEWEAVE_HEADER_ONLY=1 -Ibuild/ci-header/generated -Iinclude -c header_only.cpp -o /dev/null

      - name: Compile-only umbrella header Windows
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Set-StrictMode -Version Latest
          $code = @'
          #include "byteweave/byteweave.hpp"
          int main(){ return 0; }
          '@
          Set-Content -Path header_only.cpp -Value $code -Encoding UTF8
          cl /nologo /EHsc /std:c++20 /DBYTEWEAVE_HEADER_ONLY=1 /I build\ci-header\generated /I include /c header_only.cpp

      - name: Build single header
        shell: bash
        run: |
          cmake --build --preset ci-header --target single_header --parallel

      - name: Upload single header artifact early
        uses: actions/upload-artifact@v4
        with:
          name: byteweave-single-header-${{ matrix.os }}-${{ matrix.compiler }}
          path: build/ci-header/byteweave-*.single.hpp
          if-no-files-found: error

      - name: Check single header self-containment POSIX
        if: runner.os != 'Windows'
        shell: bash
        run: |
          set -euo pipefail
          HEADER=$(ls build/ci-header/byteweave-*.single.hpp | head -n 1)
          echo "Header: $HEADER"
          if grep -nE '#\s*include\s*["<]byteweave/' "$HEADER"; then
            echo "::error::Single header should not include byteweave/* headers"; exit 1
          fi

      - name: Check single header self-containment Windows
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $header = (Get-ChildItem "build/ci-header" -Filter "byteweave-*.single.hpp" | Select-Object -First 1).FullName
          Write-Host "Header: $header"
          $hit = Select-String -Path $header -Pattern '#\s*include\s*["<]byteweave/'
          if ($hit) { throw "Single header should not include byteweave/* headers" }

      - name: Lint single header POSIX
        if: runner.os != 'Windows'
        shell: bash
        run: |
          set -euo pipefail
          HEADER=$(ls build/ci-header/byteweave-*.single.hpp | head -n 1)
          echo "Header: $HEADER"

          echo "Includes present in single header (for info):"
          grep -nE '^[[:space:]]*#\s*include\s*[<"].+[>"]' "$HEADER" || true

          if grep -nE '^[[:space:]]*#\s*include\s*"' "$HEADER"; then
            echo "::error::Single header must not contain local quote includes"; exit 1
          fi

          PO=$(grep -nE '^[[:space:]]*#\s*pragma\s+once' "$HEADER" | wc -l | tr -d ' ')
          if [ "$PO" != "1" ]; then
            echo "::error::Expected exactly one '#pragma once' but found $PO"; exit 1
          fi

          macros=(
            BW_API
            BYTEWEAVE_AMALGAMATED
            BYTEWEAVE_HEADER_ONLY
            BYTEWEAVE_URLSAFE_DEFAULT
            BYTEWEAVE_STRICT_DECODING
            BYTEWEAVE_VERSION_MAJOR
            BYTEWEAVE_VERSION_MINOR
            BYTEWEAVE_VERSION_PATCH
            BYTEWEAVE_VERSION_STRING
          )

          for M in "${macros[@]}"; do
            C=$(grep -nE "^[[:space:]]*#\s*define\s+$M\b" "$HEADER" | wc -l | tr -d ' ')
            if [ "$C" -gt 1 ]; then
              echo "::error::Macro '$M' defined $C times in single header"; exit 1
            fi
          done

          if ! grep -qE '[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}Z' "$HEADER"; then
            echo "::warning::No ISO8601Z timestamp found in header banner"
          fi

          if [ "$(head -c3 "$HEADER" | od -An -t x1 | tr -d ' ')" = "efbbbf" ]; then
            echo "::warning::Header has a UTF-8 BOM; consider removing"
          fi
          last_byte=$(tail -c1 "$HEADER" | od -An -t x1 | tr -d ' ')
          if [ -n "$last_byte" ] && [ "$last_byte" != "0a" ]; then
            echo "::warning::Header does not end with a newline"
          fi

      - name: Lint single header Windows
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $header = (Get-ChildItem "build/ci-header" -Filter "byteweave-*.single.hpp" | Select-Object -First 1).FullName
          Write-Host "Header: $header"

          $incLocal = Select-String -Path $header -Pattern '^\s*#\s*include\s*"'
          if ($incLocal) { throw "Single header must not contain local quote includes" }

          $po = (Select-String -Path $header -Pattern '^\s*#\s*pragma\s+once').Count
          if ($po -ne 1) { throw "Expected exactly one '#pragma once' but found $po" }

          $macros = @(
            'BW_API',
            'BYTEWEAVE_AMALGAMATED',
            'BYTEWEAVE_HEADER_ONLY',
            'BYTEWEAVE_URLSAFE_DEFAULT',
            'BYTEWEAVE_STRICT_DECODING',
            'BYTEWEAVE_VERSION_MAJOR',
            'BYTEWEAVE_VERSION_MINOR',
            'BYTEWEAVE_VERSION_PATCH',
            'BYTEWEAVE_VERSION_STRING'
          )

          foreach ($m in $macros) {
            $count = (Select-String -Path $header -Pattern ("^\s*#\s*define\s+" + [regex]::Escape($m) + "\b")).Count
            if ($count -gt 1) { throw "Macro '$m' defined $count times in single header" }
          }

          $ts = Select-String -Path $header -Pattern '\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}Z'
          if (-not $ts) { Write-Warning "No ISO8601Z timestamp found in header banner" }

          $bytes = [System.IO.File]::ReadAllBytes($header)
          if ($bytes.Length -ge 3 -and $bytes[0] -eq 0xEF -and $bytes[1] -eq 0xBB -and $bytes[2] -eq 0xBF) {
            Write-Warning "Header has a UTF-8 BOM; consider removing"
          }
          if ($bytes.Length -gt 0 -and $bytes[$bytes.Length-1] -ne 10) {
            Write-Warning "Header does not end with a newline"
          }

      - name: ODR probe POSIX
        if: runner.os != 'Windows'
        shell: bash
        run: |
          set -euo pipefail
          CXX=$(grep -E '^CMAKE_CXX_COMPILER:FILEPATH=' build/ci-header/CMakeCache.txt | cut -d= -f2-)
          HEADER=$(ls build/ci-header/byteweave-*.single.hpp | head -n 1)
          echo "#include \"$HEADER\"" > odr_a.cpp
          echo "#include \"$HEADER\"" > odr_b.cpp
          echo "int main(){return 0;}" >> odr_a.cpp
          echo "int f(){return 42;}" >> odr_b.cpp
          "$CXX" -std=c++20 odr_a.cpp odr_b.cpp -o odr_test
          ./odr_test

      - name: ODR probe Windows
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $cxx = (Select-String -Path "build/ci-header/CMakeCache.txt" -Pattern '^CMAKE_CXX_COMPILER:FILEPATH=' | Select-Object -First 1).Line -replace '.*=',''
          $header = (Get-ChildItem "build/ci-header" -Filter "byteweave-*.single.hpp" | Select-Object -First 1).FullName
          Set-Content -Path odr_a.cpp -Value "#include `"$header`"`nint main(){return 0;}"
          Set-Content -Path odr_b.cpp -Value "#include `"$header`"`nint f(){return 42;}"
          & "$cxx" /std:c++20 /EHsc odr_a.cpp odr_b.cpp /Fe:odr_test.exe
          & .\odr_test.exe

      - name: Build example_single
        shell: bash
        run: |
          cmake --build --preset ci-header --target example_single --parallel

      - name: Run example_single Linux and macOS
        if: runner.os != 'Windows'
        shell: bash
        run: |
          set -euo pipefail
          exe="build/ci-header/example_single"
          if [ ! -f "$exe" ]; then
            echo "example_single not found at $exe" >&2
            exit 1
          fi
          "$exe"

      - name: Run example_single Windows
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $exe = "build/ci-header/example_single.exe"
          $alt = "build/ci-header/Release/example_single.exe"
          if (!(Test-Path $exe) -and (Test-Path $alt)) { $exe = $alt }
          if (!(Test-Path $exe)) {
            Write-Error "example_single not found at $exe"
          }
          $env:PATH = "build/ci-header;$env:PATH"
          & $exe

      - name: sccache stats (final)
        if: always()
        uses: ./.github/actions/sccache-stats

  build-sanitizers:
    name: sanitizers (ubuntu clang asan+ubsan)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Ninja
        uses: ./.github/actions/setup-ninja
        with:
          version: ${{ env.NINJA_VERSION }}

      - name: Setup Python (if needed)
        id: setup_python
        uses: ./.github/actions/setup-python-if-needed
        with:
          min_version: "3.10"
          setup_version: "3.11"

      - name: Setup CMake (if needed)
        id: setup_cmake
        uses: ./.github/actions/setup-cmake-if-needed
        with:
          min_version: "3.20.0"
          cmake_version: "3.29.*"
          python_bin: ${{ steps.setup_python.outputs.python_bin }}

      - name: Restore sccache object cache
        uses: actions/cache@v4
        with:
          path: ${{ env.SCCACHE_DIR }}
          key: ${{ runner.os }}-sanitizers-${{ hashFiles('CMakeLists.txt', 'CMakePresets.json', 'include/**', 'src/**', 'tools/amalgamate.py') }}
          restore-keys: |
            ${{ runner.os }}-sanitizers-

      - name: Setup sccache
        uses: ./.github/actions/setup-sccache
        with:
          version: ${{ env.SCCACHE_VERSION }}

      - name: Configure preset ci-sanitizers
        shell: bash
        run: cmake --preset ci-sanitizers
        env:
          CC: clang
          CXX: clang++

      - name: Build preset ci-sanitizers
        shell: bash
        run: cmake --build --preset ci-sanitizers --parallel

      - name: Run example_lib with sanitizers
        shell: bash
        env:
          ASAN_OPTIONS: detect_leaks=1:strict_init_order=1:check_initialization_order=1:abort_on_error=1:detect_stack_use_after_return=1
          UBSAN_OPTIONS: halt_on_error=1:print_stacktrace=1
        run: |
          set -euo pipefail
          exe="build/ci-sanitizers/example_lib"
          if [ ! -f "$exe" ]; then
            echo "example_lib not found at $exe" >&2
            exit 1
          fi
          "$exe"

      - name: sccache stats (final)
        if: always()
        uses: ./.github/actions/sccache-stats

  build-warnings:
    name: warnings (linux gcc+clang, macos clang, windows msvc)
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            preset: ci-warnings-gcc
            cc: gcc
            cxx: g++
          - os: ubuntu-latest
            preset: ci-warnings-clang
            cc: clang
            cxx: clang++
          - os: macos-latest
            preset: ci-warnings-clang
            cc: clang
            cxx: clang++
          - os: windows-latest
            preset: ci-warnings-msvc
            cc: ""
            cxx: ""
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Ninja
        uses: ./.github/actions/setup-ninja
        with:
          version: ${{ env.NINJA_VERSION }}

      - name: Setup Python (if needed)
        id: setup_python
        uses: ./.github/actions/setup-python-if-needed
        with:
          min_version: "3.10"
          setup_version: "3.11"

      - name: Setup CMake (if needed)
        id: setup_cmake
        uses: ./.github/actions/setup-cmake-if-needed
        with:
          min_version: "3.20.0"
          cmake_version: "3.29.*"
          python_bin: ${{ steps.setup_python.outputs.python_bin }}

      - name: Restore sccache object cache
        uses: actions/cache@v4
        with:
          path: ${{ env.SCCACHE_DIR }}
          key: ${{ runner.os }}-warnings-${{ hashFiles('CMakeLists.txt', 'CMakePresets.json', 'include/**', 'src/**', 'tools/amalgamate.py') }}
          restore-keys: |
            ${{ runner.os }}-warnings-

      - name: Setup sccache
        uses: ./.github/actions/setup-sccache
        with:
          version: ${{ env.SCCACHE_VERSION }}

      - name: Setup MSVC env Windows
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Configure preset warnings
        shell: bash
        run: cmake --preset ${{ matrix.preset }}
        env:
          CC: ${{ matrix.cc }}
          CXX: ${{ matrix.cxx }}

      - name: Build preset warnings
        shell: bash
        run: cmake --build --preset ${{ matrix.preset }} --parallel

      - name: Run example_lib
        shell: bash
        run: |
          set -euo pipefail
          dir="build/${{ matrix.preset }}"
          if [ "${{ runner.os }}" = "Windows" ]; then
            exe="$dir/example_lib.exe"
            alt="$dir/Release/example_lib.exe"
            if [ ! -f "$exe" ] && [ -f "$alt" ]; then exe="$alt"; fi
          else
            exe="$dir/example_lib"
          fi
          if [ ! -f "$exe" ]; then
            echo "example_lib not found at $exe" >&2
            exit 1
          fi
          "$exe"

      - name: sccache stats (final)
        if: always()
        uses: ./.github/actions/sccache-stats
