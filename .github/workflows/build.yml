---
name: build

on:
  workflow_dispatch:
  push:
    branches: [main]
    paths: &build_paths
      - "CMakeLists.txt"
      - "CMakePresets.json"
      - "cmake/**"
      - "include/**"
      - "src/**"
      - "examples/**"
      - "tests/**"
      - "tools/amalgamate.py"
      - ".github/workflows/build.yml"
  pull_request:
    branches: [main]
    paths: *build_paths

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref_name }}
  cancel-in-progress: true

jobs:
  build-lib:
    # TODO[@zmeadows][P3]: add cfg.san to job name?
    name: build-lib (${{ matrix.cfg.os }}, ${{ matrix.cfg.compiler }}, shared=${{ matrix.shared }})
    runs-on: ${{ matrix.cfg.os }}
    strategy:
      fail-fast: false
      matrix:
        cfg:
          - { os: ubuntu-latest, compiler: gcc, cc: gcc, cxx: g++, san: false }
          - { os: ubuntu-latest, compiler: clang, cc: clang, cxx: clang++, san: true }
          - { os: macos-latest, compiler: clang, cc: clang, cxx: clang++, san: false }
          - { os: windows-latest, compiler: msvc, san: false }
        shared: [true, false]

    env:
      BUILD_PRESET: ${{ matrix.shared && 'ci-lib-shared' || 'ci-lib-static' }}
      BUILD_DIR: build/${{ matrix.shared && 'ci-lib-shared' || 'ci-lib-static' }}

    steps:
      - name: Show Matrix
        run: echo '${{ toJson(matrix) }}'

      - name: Checkout
        uses: actions/checkout@v5

      - name: Set Up Build Environment
        uses: ./.github/actions/setup-build

      - name: Export CC/CXX (POSIX)
        if: ${{ runner.os != 'Windows' }}
        shell: bash
        run: |
          echo "CC=${{ matrix.cfg.cc }}"  >> "$GITHUB_ENV"
          echo "CXX=${{ matrix.cfg.cxx }}" >> "$GITHUB_ENV"

      - name: Configure ASAN/UBSAN Environment
        if: ${{ matrix.cfg.san }}
        shell: bash
        run: |
          sym=$(command -v llvm-symbolizer || true)
          if [ -n "$sym" ]; then
            echo "ASAN_SYMBOLIZER_PATH=$sym" >> "$GITHUB_ENV"
          fi

          echo 'ASAN_OPTIONS=detect_leaks=1:strict_init_order=1:check_initialization_order=1:abort_on_error=1:detect_stack_use_after_return=1' >> "$GITHUB_ENV"
          echo 'UBSAN_OPTIONS=halt_on_error=1:print_stacktrace=1' >> "$GITHUB_ENV"

      - name: CMake Configure
        run: cmake --preset ${{ env.BUILD_PRESET }} ${{ matrix.cfg.san && '-DBYTEWEAVE_ENABLE_SANITIZERS=ON' || '' }}

      - name: CMake Build
        run: cmake --build --preset ${{ env.BUILD_PRESET }} --parallel

      - name: Run Examples
        run: ctest --test-dir ${{ env.BUILD_DIR }} -L examples --output-on-failure

      - name: Run Tests
        run: ctest --test-dir ${{ env.BUILD_DIR }} -LE examples --output-on-failure

      - name: sccache stats
        shell: bash
        run: ${SCCACHE_PATH} --show-stats
#  build-header:
#    name: build-header (${{ matrix.os }}, ${{ matrix.compiler }})
#    runs-on: ${{ matrix.os }}
#    strategy:
#      fail-fast: false
#      matrix:
#        os: [ubuntu-24.04, macos-15, windows-2025]
#        compiler: [gcc, clang, msvc]
#        exclude:
#          - os: ubuntu-24.04
#            compiler: msvc
#          - os: macos-15
#            compiler: msvc
#          - os: macos-15
#            compiler: gcc
#          - os: windows-2025
#            compiler: gcc
#          - os: windows-2025
#            compiler: clang
#
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v4
#
#      - name: Setup Ninja
#        uses: ./.github/actions/setup-ninja
#        with:
#          version: ${{ env.NINJA_VERSION }}
#
#      - name: Setup Python (if needed)
#        id: setup_python
#        uses: ./.github/actions/setup-python-if-needed
#        with:
#          min_version: "3.10"
#          setup_version: "3.11"
#
#      - name: Setup CMake (if needed)
#        id: setup_cmake
#        uses: ./.github/actions/setup-cmake-if-needed
#        with:
#          min_version: "3.20.0"
#          cmake_version: "3.29.*"
#          python_bin: ${{ steps.setup_python.outputs.python_bin }}
#
#      - name: Restore sccache object cache
#        uses: actions/cache@v4
#        with:
#          path: ${{ env.SCCACHE_DIR }}
#          key: ${{ runner.os }}-header-${{ matrix.compiler }}-${{ hashFiles('CMakeLists.txt', 'CMakePresets.json', 'include/**', 'src/**', 'tools/amalgamate.py') }}
#          restore-keys: |
#            ${{ runner.os }}-header-${{ matrix.compiler }}-
#
#      - name: Setup sccache
#        uses: ./.github/actions/setup-sccache
#        with:
#          version: ${{ env.SCCACHE_VERSION }}
#
#      - name: Setup MSVC env Windows
#        if: runner.os == 'Windows'
#        uses: ilammy/msvc-dev-cmd@v1
#
#      - name: Configure preset ci-header
#        shell: bash
#        run: cmake --preset ci-header
#
#      - name: Compile-only umbrella header POSIX
#        if: runner.os != 'Windows'
#        shell: bash
#        run: |
#          set -euo pipefail
#          CXX=$(grep -E '^CMAKE_CXX_COMPILER:FILEPATH=' build/ci-header/CMakeCache.txt | cut -d= -f2-)
#          cat > header_only.cpp <<'CPP'
#          #include "byteweave/byteweave.hpp"
#          int main() { return 0; }
#          CPP
#          "$CXX" -std=c++20 -DBYTEWEAVE_HEADER_ONLY=1 -Ibuild/ci-header/generated -Iinclude -c header_only.cpp -o /dev/null
#
#      - name: Compile-only umbrella header Windows
#        if: runner.os == 'Windows'
#        shell: pwsh
#        run: |
#          Set-StrictMode -Version Latest
#          $code = @'
#          #include "byteweave/byteweave.hpp"
#          int main(){ return 0; }
#          '@
#          Set-Content -Path header_only.cpp -Value $code -Encoding UTF8
#          cl /nologo /EHsc /std:c++20 /DBYTEWEAVE_HEADER_ONLY=1 /I build\ci-header\generated /I include /c header_only.cpp
#
#      - name: Build single header
#        shell: bash
#        run: |
#          cmake --build --preset ci-header --parallel
#
#      - name: Upload single header artifact early
#        uses: actions/upload-artifact@v4
#        with:
#          name: byteweave-single-header-${{ matrix.os }}-${{ matrix.compiler }}
#          path: build/ci-header/byteweave-*.single.hpp
#          if-no-files-found: error
#
#      - name: Check single header self-containment POSIX
#        if: runner.os != 'Windows'
#        shell: bash
#        run: |
#          set -euo pipefail
#          HEADER=$(ls build/ci-header/byteweave-*.single.hpp | head -n 1)
#          echo "Header: $HEADER"
#          if grep -nE '#\s*include\s*["<]byteweave/' "$HEADER"; then
#            echo "::error::Single header should not include byteweave/* headers"; exit 1
#          fi
#
#      - name: Check single header self-containment Windows
#        if: runner.os == 'Windows'
#        shell: pwsh
#        run: |
#          $header = (Get-ChildItem "build/ci-header" -Filter "byteweave-*.single.hpp" | Select-Object -First 1).FullName
#          Write-Host "Header: $header"
#          $hit = Select-String -Path $header -Pattern '#\s*include\s*["<]byteweave/'
#          if ($hit) { throw "Single header should not include byteweave/* headers" }
#
#      - name: Lint single header POSIX
#        if: runner.os != 'Windows'
#        shell: bash
#        run: |
#          set -euo pipefail
#          HEADER=$(ls build/ci-header/byteweave-*.single.hpp | head -n 1)
#          echo "Header: $HEADER"
#
#          echo "Includes present in single header (for info):"
#          grep -nE '^[[:space:]]*#\s*include\s*[<"].+[>"]' "$HEADER" || true
#
#          if grep -nE '^[[:space:]]*#\s*include\s*"' "$HEADER"; then
#            echo "::error::Single header must not contain local quote includes"; exit 1
#          fi
#
#          PO=$(grep -nE '^[[:space:]]*#\s*pragma\s+once' "$HEADER" | wc -l | tr -d ' ')
#          if [ "$PO" != "1" ]; then
#            echo "::error::Expected exactly one '#pragma once' but found $PO"; exit 1
#          fi
#
#          macros=(
#            BW_API
#            BYTEWEAVE_AMALGAMATED
#            BYTEWEAVE_HEADER_ONLY
#            BYTEWEAVE_URLSAFE_DEFAULT
#            BYTEWEAVE_STRICT_DECODING
#            BYTEWEAVE_VERSION_MAJOR
#            BYTEWEAVE_VERSION_MINOR
#            BYTEWEAVE_VERSION_PATCH
#            BYTEWEAVE_VERSION_STRING
#          )
#
#          for M in "${macros[@]}"; do
#            C=$(grep -nE "^[[:space:]]*#\s*define\s+$M\b" "$HEADER" | wc -l | tr -d ' ')
#            if [ "$C" -gt 1 ]; then
#              echo "::error::Macro '$M' defined $C times in single header"; exit 1
#            fi
#          done
#
#          if ! grep -qE '[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}Z' "$HEADER"; then
#            echo "::warning::No ISO8601Z timestamp found in header banner"
#          fi
#
#          if [ "$(head -c3 "$HEADER" | od -An -t x1 | tr -d ' ')" = "efbbbf" ]; then
#            echo "::warning::Header has a UTF-8 BOM; consider removing"
#          fi
#          last_byte=$(tail -c1 "$HEADER" | od -An -t x1 | tr -d ' ')
#          if [ -n "$last_byte" ] && [ "$last_byte" != "0a" ]; then
#            echo "::warning::Header does not end with a newline"
#          fi
#
#      - name: Lint single header Windows
#        if: runner.os == 'Windows'
#        shell: pwsh
#        run: |
#          $header = (Get-ChildItem "build/ci-header" -Filter "byteweave-*.single.hpp" | Select-Object -First 1).FullName
#          Write-Host "Header: $header"
#
#          $incLocal = Select-String -Path $header -Pattern '^\s*#\s*include\s*"'
#          if ($incLocal) { throw "Single header must not contain local quote includes" }
#
#          $po = (Select-String -Path $header -Pattern '^\s*#\s*pragma\s+once').Count
#          if ($po -ne 1) { throw "Expected exactly one '#pragma once' but found $po" }
#
#          $macros = @(
#            'BW_API',
#            'BYTEWEAVE_AMALGAMATED',
#            'BYTEWEAVE_HEADER_ONLY',
#            'BYTEWEAVE_URLSAFE_DEFAULT',
#            'BYTEWEAVE_STRICT_DECODING',
#            'BYTEWEAVE_VERSION_MAJOR',
#            'BYTEWEAVE_VERSION_MINOR',
#            'BYTEWEAVE_VERSION_PATCH',
#            'BYTEWEAVE_VERSION_STRING'
#          )
#
#          foreach ($m in $macros) {
#            $count = (Select-String -Path $header -Pattern ("^\s*#\s*define\s+" + [regex]::Escape($m) + "\b")).Count
#            if ($count -gt 1) { throw "Macro '$m' defined $count times in single header" }
#          }
#
#          $ts = Select-String -Path $header -Pattern '\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}Z'
#          if (-not $ts) { Write-Warning "No ISO8601Z timestamp found in header banner" }
#
#          $bytes = [System.IO.File]::ReadAllBytes($header)
#          if ($bytes.Length -ge 3 -and $bytes[0] -eq 0xEF -and $bytes[1] -eq 0xBB -and $bytes[2] -eq 0xBF) {
#            Write-Warning "Header has a UTF-8 BOM; consider removing"
#          }
#          if ($bytes.Length -gt 0 -and $bytes[$bytes.Length-1] -ne 10) {
#            Write-Warning "Header does not end with a newline"
#          }
#
#      - name: ODR probe POSIX
#        if: runner.os != 'Windows'
#        shell: bash
#        run: |
#          set -euo pipefail
#          CXX=$(grep -E '^CMAKE_CXX_COMPILER:FILEPATH=' build/ci-header/CMakeCache.txt | cut -d= -f2-)
#          HEADER=$(ls build/ci-header/byteweave-*.single.hpp | head -n 1)
#          echo "#include \"$HEADER\"" > odr_a.cpp
#          echo "#include \"$HEADER\"" > odr_b.cpp
#          echo "int main(){return 0;}" >> odr_a.cpp
#          echo "int f(){return 42;}" >> odr_b.cpp
#          "$CXX" -std=c++20 odr_a.cpp odr_b.cpp -o odr_test
#          ./odr_test
#
#      - name: ODR probe Windows
#        if: runner.os == 'Windows'
#        shell: pwsh
#        run: |
#          $cxx = (Select-String -Path "build/ci-header/CMakeCache.txt" -Pattern '^CMAKE_CXX_COMPILER:FILEPATH=' | Select-Object -First 1).Line -replace '.*=',''
#          $header = (Get-ChildItem "build/ci-header" -Filter "byteweave-*.single.hpp" | Select-Object -First 1).FullName
#          Set-Content -Path odr_a.cpp -Value "#include `"$header`"`nint main(){return 0;}"
#          Set-Content -Path odr_b.cpp -Value "#include `"$header`"`nint f(){return 42;}"
#          & "$cxx" /std:c++20 /EHsc odr_a.cpp odr_b.cpp /Fe:odr_test.exe
#          & .\odr_test.exe
#
#      - name: Build example_single
#        shell: bash
#        run: |
#          cmake --build --preset ci-header --parallel
#
#      - name: Run example_single Linux and macOS
#        if: runner.os != 'Windows'
#        shell: bash
#        run: |
#          set -euo pipefail
#          exe="build/ci-header/example_single"
#          if [ ! -f "$exe" ]; then
#            echo "example_single not found at $exe" >&2
#            exit 1
#          fi
#          "$exe"
#
#      - name: Run example_single Windows
#        if: runner.os == 'Windows'
#        shell: pwsh
#        run: |
#          $exe = "build/ci-header/example_single.exe"
#          $alt = "build/ci-header/Release/example_single.exe"
#          if (!(Test-Path $exe) -and (Test-Path $alt)) { $exe = $alt }
#          if (!(Test-Path $exe)) {
#            Write-Error "example_single not found at $exe"
#          }
#          $env:PATH = "build/ci-header;$env:PATH"
#          & $exe
#
#      - name: sccache stats (final)
#        if: always()
#        uses: ./.github/actions/sccache-stats
