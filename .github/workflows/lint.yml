---
name: lint (format + tidy)

# TODO[@zmeadows][P3]: lint non-cpp code and config files?

on:
  workflow_dispatch:
  push:
    branches: [main]
    paths: &lint_paths
      - "include/**"
      - "src/**"
      - "examples/**"
      - "tests/**"
      - ".github/workflows/lint.yml"
  pull_request:
    paths: *lint_paths

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref_name }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

jobs:
  format:
    name: clang-format check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Set Up Python
        uses: actions/setup-python@v6
        with:
          python-version: "~3.12.0"

      - name: Install clang-format (wheel)
        id: cf
        run: |
          set -euo pipefail
          pipx install "clang-format==21.*"
          CF="$(command -v clang-format || true)"
          if [[ -z "$CF" ]]; then
            CF="$(pipx environment --value PIPX_BIN_DIR)/clang-format"
          fi
          echo "path=$CF" >> "$GITHUB_OUTPUT"
          "$CF" --version

      - name: Run clang-format
        run: |
          python3 tools/format.py \
          --clang-format "${{ steps.cf.outputs.path }}" \
          --check

  tidy:
    name: clang-tidy (no build)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Install clang-tidy (wheel)
        id: ct
        run: |
          set -euo pipefail
          pipx install "clang-tidy==21.*"
          CT="$(command -v clang-tidy || true)"
          if [[ -z "$CT" ]]; then
            CT="$(pipx environment --value PIPX_BIN_DIR)/clang-tidy"
          fi
          echo "path=$CT" >> "$GITHUB_OUTPUT"
          "$CT" --version

      - name: CMake Configure (for compile_commands.json)
        run: cmake --preset ci-tidy

      - name: Run clang-tidy
        run: |
          python3 tools/tidy.py \
            --clang-tidy "${{ steps.ct.outputs.path }}" \
            --p build/ci-tidy \
            --warnings-as-errors \
            --jobs $(nproc)
